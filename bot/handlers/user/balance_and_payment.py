import asyncio
import datetime

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from bot.database.methods import get_all_categories
from bot.database.methods import get_item_info, get_item_value, buy_item, add_bought_item, \
    start_operation, \
    select_unfinished_operations, get_user_referral, finish_operation, update_balance, create_operation
from bot.handlers.other import get_bot_user_ids
from bot.keyboards import back, payment_menu, close
from bot.logger_mesh import logger
from bot.misc import TgConfig, EnvKeys
from bot.misc.payment import quick_pay, check_payment_status
from bot.keyboards import categories_list
ADMIN_CHAT_ID = EnvKeys.OWNER_ID

async def replenish_balance_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    message_id = call.message.message_id

    if EnvKeys.ACCESS_TOKEN and EnvKeys.ACCOUNT_NUMBER is not None:
        TgConfig.STATE[f'{user_id}_message_id'] = message_id
        TgConfig.STATE[user_id] = 'process_replenish_balance'
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=message_id,
                                    text='üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
                                    reply_markup=back('profile'))
        return

    await call.answer('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')


async def process_replenish_balance(message: Message):
    bot, user_id = await get_bot_user_ids(message)

    text = message.text
    message_id = TgConfig.STATE.get(f'{user_id}_message_id')
    TgConfig.STATE[user_id] = None
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    if not text.isdigit() or int(text) < 20 or int(text) > 10000:
        await bot.edit_message_text(chat_id=message.chat.id,
                                    message_id=message_id,
                                    text="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. "
                                         "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω—å—à–µ 20‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 10 000‚ÇΩ",
                                    reply_markup=back('replenish_balance'))
        return

    label, url = quick_pay(message)
    start_operation(user_id, text, label)
    sleep = TgConfig.PAYMENT_TIME
    sleep_time = int(sleep)
    markup = payment_menu(url, label)
    await bot.edit_message_text(chat_id=message.chat.id,
                                message_id=message_id,
                                text=f'üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {text}‚ÇΩ.\n'
                                     f'‚åõÔ∏è –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è {int(sleep_time / 60)} –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.\n'
                                     f'<b>‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>',
                                reply_markup=markup)
    await asyncio.sleep(sleep_time)
    info = select_unfinished_operations(label)
    if info:
        payment_status = await check_payment_status(label)

        if not payment_status == "success":
            finish_operation(label)


async def checking_payment(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    message_id = call.message.message_id
    label = call.data[6:]
    info = select_unfinished_operations(label)

    if info:
        operation_value = info[0]
        payment_status = await check_payment_status(label)

        if payment_status == "success":
            current_time = datetime.datetime.now()
            formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
            referral_id = get_user_referral(user_id)
            finish_operation(label)

            if referral_id and TgConfig.REFERRAL_PERCENT != 0:
                referral_percent = TgConfig.REFERRAL_PERCENT
                referral_operation = round((referral_percent / 100) * operation_value)
                update_balance(referral_id, referral_operation)
                await bot.send_message(referral_id,
                                       f'‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_operation}‚ÇΩ '
                                       f'–æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª {call.from_user.first_name}',
                                       reply_markup=close())

            create_operation(user_id, operation_value, formatted_time)
            update_balance(user_id, operation_value)
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=message_id,
                                        text=f'‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {operation_value}‚ÇΩ',
                                        reply_markup=back('profile'))
        else:
            await call.answer(text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    else:
        await call.answer(text='‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')


async def buy_item_callback_handler(call: CallbackQuery):
    item_name = call.data[4:]
    bot, user_id = await get_bot_user_ids(call)
    msg = call.message.message_id
    item_info_list = get_item_info(item_name)
    item_price = item_info_list["price"]

    value_data = get_item_value(item_name)

async def buy_item_callback_handler(call: CallbackQuery):
    item_name = call.data[4:]
    bot, user_id = await get_bot_user_ids(call)
    msg = call.message.message_id
    item_info_list = get_item_info(item_name)
    item_price = item_info_list["price"]
    
    # Get category for the item
    item_category = item_info_list.get("category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    value_data = get_item_value(item_name)

    if value_data:
        current_time = datetime.datetime.now()
        formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
        buy_item(value_data['id'], value_data['is_infinity'])
        add_bought_item(value_data['item_name'], value_data['value'], item_price, user_id, formatted_time)
        
        # Send confirmation to buyer
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=msg,
                                    text=f'‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω.\n\n'
                                         f'üìÇ <b>–¢–æ–≤–∞—Ä:</b> {item_category}\n'
                                         f'üõçÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {value_data["item_name"]}\n'
                                         f'üíµ <b>–¶–µ–Ω–∞:</b> ${item_price}',
                                    parse_mode='HTML')
        
        # Get user info and send notification to admin
        user_info = await bot.get_chat(user_id)
        
        # Format username display
        username_text = f"@{user_info.username}" if user_info.username else "–±–µ–∑ username"
        
        # Send you a direct message about the purchase
        notification_text = (
            f"üí∞ <b>–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!</b>\n\n"
            f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {user_info.first_name} ({username_text})\n"
            f"üÜî <b>ID:</b> {user_id}\n"
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {item_category}\n"
            f"üõçÔ∏è <b>–¢–æ–≤–∞—Ä:</b> {value_data['item_name']}\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${item_price}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
            f"üì¶ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {value_data['value']}"
        )
        
        await bot.send_message(chat_id=ADMIN_CHAT_ID, 
                              text=notification_text, 
                              parse_mode='HTML')
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_info.first_name})"
                    f" –∫—É–ø–∏–ª 1 —Ç–æ–≤–∞—Ä –ø–æ–∑–∏—Ü–∏–∏ {value_data['item_name']} –∑–∞ {item_price}‚ÇΩ")
        return

    return


def register_balance_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(replenish_balance_callback_handler,
                                       lambda c: c.data == 'replenish_balance')

    dp.register_message_handler(process_replenish_balance,
                                lambda c: TgConfig.STATE.get(c.from_user.id) == 'process_replenish_balance')

    dp.register_callback_query_handler(checking_payment,
                                       lambda c: c.data.startswith('check_'))
    dp.register_callback_query_handler(buy_item_callback_handler,
                                       lambda c: c.data.startswith('buy_'))
