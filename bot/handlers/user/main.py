import datetime
from urllib.parse import urlparse

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ChatType
from aiogram.utils.exceptions import ChatNotFound

from bot.database.methods import select_max_role_id, create_user, check_role, check_user, select_user_operations, \
    select_user_items, check_user_referrals
from bot.handlers.other import get_bot_user_ids, check_sub_channel, get_bot_info
from bot.handlers.user.balance_and_payment import register_balance_handlers
from bot.handlers.user.shop_and_goods import register_shop_handlers
from bot.keyboards import check_sub, main_menu, rules, profile, back
from bot.misc import TgConfig, EnvKeys


async def start(message: Message):
    bot, user_id = await get_bot_user_ids(message)

    if message.chat.type != ChatType.PRIVATE:
        return

    TgConfig.STATE[user_id] = None

    owner = select_max_role_id()
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    referral_id = message.text[7:] if message.text[7:] != str(user_id) else None
    user_role = owner if str(user_id) == EnvKeys.OWNER_ID else 1
    create_user(telegram_id=user_id, registration_date=formatted_time, referral_id=referral_id, role=user_role)
    chat = TgConfig.CHANNEL_URL[13:]
    role_data = check_role(user_id)

    try:
        if chat is not None:
            chat_member = await bot.get_chat_member(chat_id=f'@{chat}', user_id=user_id)
            if not await check_sub_channel(chat_member):
                markup = check_sub(chat)
                await bot.send_message(user_id,
                                       '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª',
                                       reply_markup=markup)
                await bot.delete_message(chat_id=message.chat.id,
                                         message_id=message.message_id)
                return

    except ChatNotFound:
        pass

    markup = main_menu(role_data, chat, TgConfig.HELPER_URL)
    await bot.send_message(user_id,
                           'üß¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DNA shop Calgary!',
                           reply_markup=markup)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


async def back_to_menu_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    user = check_user(call.from_user.id)
    markup = main_menu(user.role_id, TgConfig.CHANNEL_URL, TgConfig.HELPER_URL)
    await bot.edit_message_text('üß¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DNA shop Calgary!',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=markup)


async def rules_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    rules_data = TgConfig.RULES

    if rules_data:
        await bot.edit_message_text(rules_data, chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, reply_markup=rules())
        return

    await call.answer(text='‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')


async def profile_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    user = call.from_user
    TgConfig.STATE[user_id] = None
    user_info = check_user(user_id)
    balance = user_info.balance
    operations = select_user_operations(user_id)
    overall_balance = 0

    if operations:

        for i in operations:
            overall_balance += i

    items = select_user_items(user_id)
    referral = TgConfig.REFERRAL_PERCENT
    markup = profile(referral, items)
    await bot.edit_message_text(text=f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî {user.first_name}\nüÜî"
                                     f" <b>ID</b> ‚Äî <code>{user_id}</code>\n"
                                     f"üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî <code>{balance}</code> ‚ÇΩ\n"
                                     f"üíµ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ</b> ‚Äî <code>{overall_balance}</code> ‚ÇΩ\n"
                                     f" üéÅ <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</b> ‚Äî {items} —à—Ç",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id, reply_markup=markup,
                                parse_mode='HTML')


async def referral_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    referrals = check_user_referrals(user_id)
    referral_percent = TgConfig.REFERRAL_PERCENT
    await bot.edit_message_text(f'üíö –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n'
                                f'üîó –°—Å—ã–ª–∫–∞: https://t.me/{await get_bot_info(call)}?start={user_id}\n'
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n'
                                f'üìî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±–µ–∑ –≤—Å—è–∫–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π. '
                                f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –ª–∏—à—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å'
                                f' {referral_percent}% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=back('profile'))


async def check_sub_to_channel(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    chat = TgConfig.CHANNEL_URL
    parsed_url = urlparse(chat)
    channel_username = parsed_url.path.lstrip('/')
    helper = TgConfig.HELPER_URL
    chat_member = await bot.get_chat_member(chat_id='@' + channel_username, user_id=call.from_user.id)

    if await check_sub_channel(chat_member):
        user = check_user(call.from_user.id)
        role = user.role_id
        markup = main_menu(role, chat, helper)
        await bot.edit_message_text('üß¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DNA shop Calgary!', chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, reply_markup=markup)
    else:
        await call.answer(text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å')


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start,
                                commands=['start'])
    dp.register_callback_query_handler(back_to_menu_callback_handler,
                                       lambda c: c.data == 'back_to_menu')
    dp.register_callback_query_handler(rules_callback_handler,
                                       lambda c: c.data == 'rules')
    dp.register_callback_query_handler(profile_callback_handler,
                                       lambda c: c.data == 'profile')
    dp.register_callback_query_handler(referral_callback_handler,
                                       lambda c: c.data == 'referral_system')
    dp.register_callback_query_handler(check_sub_to_channel,
                                       lambda c: c.data == 'sub_channel_done')

    register_shop_handlers(dp)
    register_balance_handlers(dp)
